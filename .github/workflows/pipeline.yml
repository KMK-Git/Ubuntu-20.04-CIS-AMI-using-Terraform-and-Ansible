name: "Deployment Pipeline"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  pipeline:
    name: "Deployment Pipeline"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~0.14.0
          terraform_wrapper: true

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$STATE_BUCKET_NAME" -backend-config="key=$STATE_BUCKET_KEY"
        env:
          STATE_BUCKET_NAME: ${{ secrets.STATE_BUCKET_NAME }}
          STATE_BUCKET_KEY: ${{ secrets.STATE_BUCKET_KEY }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        env:
          TF_VAR_vpc_name: ${{ secrets.VPC_NAME }}
          TF_VAR_sg_name: ${{ secrets.SG_NAME }}
          TF_VAR_vpc_azs: ${{ secrets.VPC_AZS }}
          TF_VAR_vpc_cidr: ${{ secrets.VPC_CIDR }}
          TF_VAR_vpc_public_subnets: ${{ secrets.VPC_PUBLIC_SUBNETS }}
          TF_VAR_vpc_private_subnets: ${{ secrets.VPC_PRIVATE_SUBNETS }}
          TF_VAR_iam_role_name: ${{ secrets.IAM_ROLE_NAME }}
          TF_VAR_instance_name: ${{ secrets.INSTANCE_NAME }}

      - name: Comment to PR
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;


            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
          TF_VAR_vpc_name: ${{ secrets.VPC_NAME }}
          TF_VAR_sg_name: ${{ secrets.SG_NAME }}
          TF_VAR_vpc_azs: ${{ secrets.VPC_AZS }}
          TF_VAR_vpc_cidr: ${{ secrets.VPC_CIDR }}
          TF_VAR_vpc_public_subnets: ${{ secrets.VPC_PUBLIC_SUBNETS }}
          TF_VAR_vpc_private_subnets: ${{ secrets.VPC_PRIVATE_SUBNETS }}
          TF_VAR_iam_role_name: ${{ secrets.IAM_ROLE_NAME }}
          TF_VAR_instance_name: ${{ secrets.INSTANCE_NAME }}

      - name: Setup Terraform without wrapper
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~0.14.0
          terraform_wrapper: false

      - name: Wait for instance to register itself with aws ssm
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          while true ; do
              aws ssm  describe-instance-information --filters "Key=InstanceIds,Values="$(terraform output -raw instance_id)""
              assoc_length="$(aws ssm  describe-instance-information --filters "Key=InstanceIds,Values="$(terraform output -raw instance_id)"" | jq '.InstanceInformationList | length')"
              echo $assoc_length
              if [[ $assoc_length -gt 0 ]]; then
                  break
              fi
              sleep 20
          done
        timeout-minutes: 8

      - name: Upload Ansible zip
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          ansible-vault decrypt ansible/roles/cisubuntu/defaults/main.yml --vault-password-file ansible/vault.sh
          cd ansible; zip -r ../ubuntuansible.zip . * ; cd ..
          aws s3 cp ubuntuansible.zip "s3://$ANSIBLE_BUCKET/ubuntuansible.zip"
        env:
          ANSIBLE_BUCKET: ${{ secrets.ANSIBLE_BUCKET }}
          VAULT_PASS: ${{ secrets.VAULT_PASS }}

      - name: Ansible deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          aws ssm send-command --document-name "AWS-ApplyAnsiblePlaybooks" --document-version "1" --instance-ids "$(terraform output -raw instance_id)" --parameters '{"SourceType":["S3"],"SourceInfo":["{\"path\": \"https://s3.amazonaws.com/'"$ANSIBLE_BUCKET"'/ubuntuansible.zip\"}"],"InstallDependencies":["True"],"PlaybookFile":["playbook.yml"],"ExtraVariables":[""],"Check":["False"],"Verbose":["-vvvv"],"TimeoutSeconds":["600"]}' --timeout-seconds 600 --max-errors "0" --output-s3-bucket-name "$ANSIBLE_BUCKET" --output-s3-key-prefix "runcommandouput/"
        env:
          ANSIBLE_BUCKET: ${{ secrets.ANSIBLE_BUCKET }}
