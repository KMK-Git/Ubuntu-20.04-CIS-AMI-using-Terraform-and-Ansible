name: "Deployment Pipeline"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  pipeline:
    name: "Deployment Pipeline"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~0.14.0

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$STATE_BUCKET_NAME" -backend-config="key=$STATE_BUCKET_KEY"
        env:
          STATE_BUCKET_NAME: ${{ secrets.STATE_BUCKET_NAME }}
          STATE_BUCKET_KEY: ${{ secrets.STATE_BUCKET_KEY }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        env:
          TF_VAR_vpc_name: ${{ secrets.VPC_NAME }}
          TF_VAR_sg_name: ${{ secrets.SG_NAME }}
          TF_VAR_vpc_azs: ${{ secrets.VPC_AZS }}
          TF_VAR_vpc_cidr: ${{ secrets.VPC_CIDR }}
          TF_VAR_vpc_private_subnets: ${{ secrets.VPC_PRIVATE_SUBNETS }}
          TF_VAR_iam_role_name: ${{ secrets.IAM_ROLE_NAME }}
          TF_VAR_instance_name: ${{ secrets.INSTANCE_NAME }}

      - name: Setup Graphviz
        id: graphviz_setup
        if: steps.plan.outcome == 'success'
        uses: ts-graphviz/setup-graphviz@v1
        continue-on-error: true

      - name: Terraform graph
        id: graph
        if: steps.graphviz_setup.outcome == 'success'
        run: terraform graph | dot -Tpng > graph.png
        continue-on-error: true
        env:
          TF_VAR_vpc_name: ${{ secrets.VPC_NAME }}
          TF_VAR_sg_name: ${{ secrets.SG_NAME }}
          TF_VAR_vpc_azs: ${{ secrets.VPC_AZS }}
          TF_VAR_vpc_cidr: ${{ secrets.VPC_CIDR }}
          TF_VAR_vpc_private_subnets: ${{ secrets.VPC_PRIVATE_SUBNETS }}
          TF_VAR_iam_role_name: ${{ secrets.IAM_ROLE_NAME }}
          TF_VAR_instance_name: ${{ secrets.INSTANCE_NAME }}

      - name: Upload graph
        id: upload
        if: steps.graph.outcome == 'success'
        uses: devicons/public-upload-to-imgur@v2.1.1
        with:
          path: ./graph.png
          client_id: ${{secrets.IMGUR_TOKEN}}
        continue-on-error: true

      - name: Comment with image
        uses: actions/github-script@v3
        if: ${{ github.event_name == 'pull_request' && steps.upload.outcome == 'success' }}
        env:
          IMG_URL: ${{ fromJSON(steps.upload.outputs.imgur_urls)[0] }}
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*

            ![Graph](${ process.env.IMG_URL })`;


            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Comment without image
        uses: actions/github-script@v3
        if: ${{ github.event_name == 'pull_request' && steps.upload.outcome != 'success' }}
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;


            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
          TF_VAR_vpc_name: ${{ secrets.VPC_NAME }}
          TF_VAR_sg_name: ${{ secrets.SG_NAME }}
          TF_VAR_vpc_azs: ${{ secrets.VPC_AZS }}
          TF_VAR_vpc_cidr: ${{ secrets.VPC_CIDR }}
          TF_VAR_vpc_private_subnets: ${{ secrets.VPC_PRIVATE_SUBNETS }}
          TF_VAR_iam_role_name: ${{ secrets.IAM_ROLE_NAME }}
          TF_VAR_instance_name: ${{ secrets.INSTANCE_NAME }}
