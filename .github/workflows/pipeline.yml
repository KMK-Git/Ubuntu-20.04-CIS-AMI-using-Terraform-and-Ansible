name: "Ubuntu 20.04 CIS AMI Baker"

on:
  workflow_dispatch:
    AMIName:
      description: "Name of EC2 AMI created"
      required: true
      default: "Ubuntu 20.04 CIS AMI"
    create_instance_and_deploy_ansible:
      description: "Set 'yes' to create instance and deploy ansible"
      required: true
      default: "yes"
    create_ami_and_destroy_instance:
      description: "Set 'yes' to create AMI and destroy instance. Make sure instance was created and ansible playbook is deployed if create_instance_and_deploy_ansible != 'yes'"
      required: true
      default: "yes"

jobs:
  deploy:
    name: "Ubuntu 20.04 CIS AMI Baker"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2

      - name: Setup Terraform with wrapper
        id: setup1
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~0.14.0
          terraform_wrapper: true

      - name: Configure AWS Credentials
        id: aws_credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$STATE_BUCKET_NAME" -backend-config="key=$STATE_BUCKET_KEY"
        env:
          STATE_BUCKET_NAME: ${{ secrets.STATE_BUCKET_NAME }}
          STATE_BUCKET_KEY: ${{ secrets.STATE_BUCKET_KEY }}

      - name: Terraform Apply
        if: ${{ github.event.inputs.create_instance_and_deploy_ansible == 'yes' }}
        id: apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_vpc_name: ${{ secrets.VPC_NAME }}
          TF_VAR_sg_name: ${{ secrets.SG_NAME }}
          TF_VAR_vpc_azs: ${{ secrets.VPC_AZS }}
          TF_VAR_vpc_cidr: ${{ secrets.VPC_CIDR }}
          TF_VAR_vpc_public_subnets: ${{ secrets.VPC_PUBLIC_SUBNETS }}
          TF_VAR_vpc_private_subnets: ${{ secrets.VPC_PRIVATE_SUBNETS }}
          TF_VAR_iam_role_name: ${{ secrets.IAM_ROLE_NAME }}
          TF_VAR_instance_name: ${{ secrets.INSTANCE_NAME }}

      - name: Setup Terraform without wrapper
        id: setup2
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~0.14.0
          terraform_wrapper: false

      - name: Wait for instance to register itself with aws ssm
        if: ${{ github.event.inputs.create_instance_and_deploy_ansible == 'yes' }}
        id: instance_ssm_register
        run: |
          while true ; do
              assoc_length="$(aws ssm  describe-instance-information --filters "Key=InstanceIds,Values="$(terraform output -raw instance_id)"" | jq '.InstanceInformationList | length')"
              if [[ $assoc_length -gt 0 ]]; then
                  break
              fi
              sleep 20
          done
        timeout-minutes: 8

      - name: Upload Ansible zip
        if: ${{ github.event.inputs.create_instance_and_deploy_ansible == 'yes' }}
        id: upload_ansible_zip
        run: |
          ansible-vault decrypt ansible/roles/cisubuntu/defaults/main.yml --vault-password-file ansible/vault.sh
          cd ansible; zip -r ../ubuntuansible.zip . * ; cd ..
          aws s3 cp ubuntuansible.zip "s3://$ANSIBLE_BUCKET/ubuntuansible.zip"
        env:
          ANSIBLE_BUCKET: ${{ secrets.ANSIBLE_BUCKET }}
          VAULT_PASS: ${{ secrets.VAULT_PASS }}

      - name: Ansible deploy
        if: ${{ github.event.inputs.create_instance_and_deploy_ansible == 'yes' }}
        id: ansible_deploy
        run: |
          ssm_command_id="$(aws ssm send-command --document-name "AWS-ApplyAnsiblePlaybooks" --document-version "1" --instance-ids "$(terraform output -raw instance_id)" --parameters '{"SourceType":["S3"],"SourceInfo":["{\"path\": \"https://s3.amazonaws.com/'"$ANSIBLE_BUCKET"'/ubuntuansible.zip\"}"],"InstallDependencies":["True"],"PlaybookFile":["playbook.yml"],"ExtraVariables":[""],"Check":["False"],"Verbose":["-vvvv"],"TimeoutSeconds":["1800"]}' --timeout-seconds 1800 --max-errors "0" --output-s3-bucket-name "$ANSIBLE_BUCKET" --output-s3-key-prefix "runcommandouput/" | jq '.Command.CommandId')"
          echo ::set-output name=ssm_command_id::"$ssm_command_id"
        env:
          ANSIBLE_BUCKET: ${{ secrets.ANSIBLE_BUCKET }}

      - name: Wait for ansible deployment to complete
        if: ${{ github.event.inputs.create_instance_and_deploy_ansible == 'yes' && github.event.inputs.create_ami_and_destroy_instance == 'yes' }}
        id: ansible_deploy_wait
        run: |
          while true ; do
              command_status="$(aws ssm get-command-invocation --command-id "$SSM_COMMAND_ID"  --instance-id "$(terraform output -raw instance_id)" --plugin-name "runShellScript" | jq -r '.Status')"
              if [[ $command_status == "Success" ]]; then
                  break
              fi
              sleep 20
          done
        timeout-minutes: 30
        env:
          SSM_COMMAND_ID: ${{ steps.ansible_deploy.outputs.ssm_command_id }}

      - name: Create AMI from EC2 instance
        if: ${{ github.event.inputs.create_ami_and_destroy_instance == 'yes' }}
        id: create_ami
        run: |
          image_id="$(aws ec2 create-image --instance-id "$(terraform output -raw instance_id)" --name "${{ github.event.inputs.AMIName }}" || jq -r '.ImageId')"
          aws ec2 wait image-available --image-ids $image_id

      - name: Setup Terraform with wrapper
        id: setup3
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ~0.14.0
          terraform_wrapper: true

      - name: Terraform destroy
        if: ${{ github.event.inputs.create_ami_and_destroy_instance == 'yes' }}
        id: destroy
        run: terraform destroy -auto-approve
        env:
          TF_VAR_vpc_name: ${{ secrets.VPC_NAME }}
          TF_VAR_sg_name: ${{ secrets.SG_NAME }}
          TF_VAR_vpc_azs: ${{ secrets.VPC_AZS }}
          TF_VAR_vpc_cidr: ${{ secrets.VPC_CIDR }}
          TF_VAR_vpc_public_subnets: ${{ secrets.VPC_PUBLIC_SUBNETS }}
          TF_VAR_vpc_private_subnets: ${{ secrets.VPC_PRIVATE_SUBNETS }}
          TF_VAR_iam_role_name: ${{ secrets.IAM_ROLE_NAME }}
          TF_VAR_instance_name: ${{ secrets.INSTANCE_NAME }}
